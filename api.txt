# Orbitmate API 문서

## 공통 사항
- Base URL: `http://localhost:{PORT}` (예: `http://192.168.10.77:7777`)
- 모든 요청/응답 본문은 JSON 형식 (파일 업로드 시 `multipart/form-data`)
- 오류 발생 시 응답 본문에 `{ "error": { "code": "오류 코드", "message": "오류 메시지" } }` 또는 `{ "error": "오류 메시지" }` 형식으로 오류 내용이 포함됩니다.
- 현재 버전에서는 인증/인가 기능이 최소화되어 있으며, 대부분의 API에서 토큰 검증이 일시적으로 비활성화되어 있습니다.

## 목차
1. [서버 상태 확인](#1-서버-상태-확인)
2. [사용자 관리](#2-사용자-관리)
3. [채팅 세션 관리](#3-채팅-세션-관리)
4. [채팅 메시지 관리](#4-채팅-메시지-관리)
5. [파일 업로드](#5-파일-업로드)

---

## 1. 서버 상태 확인

### 1.1. GET /api/health
- 설명: 서버의 현재 상태와 타임스탬프를 반환합니다.
- 요청: 없음
- 응답 (성공):
  ```json
  {
    "status": "ok",
    "timestamp": "YYYY-MM-DDTHH:mm:ss.sssZ"
  }
  ```

---

## 2. 사용자 관리

### 2.1. POST /api/users/register
- 설명: 새로운 사용자를 등록합니다.
- 요청 본문:
  ```json
  {
    "username": "testuser",
    "email": "test@example.com",
    "password": "password123"
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "사용자 등록 성공",
    "userId": "생성된 사용자 ID",
    "token": "JWT 토큰" 
  }
  ```
  *참고: 현재 토큰 발급은 되지만, API 요청 시 검증은 최소화되어 있습니다.*
- 응답 (오류):
  ```json
  {
    "error": "필수 입력값이 누락되었습니다." 
  }
  ```
  ```json
  {
    "error": "이미 사용 중인 이메일입니다."
  }
  ```

### 2.2. POST /api/users/login
- 설명: 사용자가 로그인합니다.
- 요청 본문:
  ```json
  {
    "email": "test@example.com",
    "password": "password123"
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "로그인 성공",
    "userId": "사용자 ID",
    "username": "사용자 이름",
    "token": "JWT 토큰"
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "이메일 또는 비밀번호를 확인해주세요."
  }
  ```

### 2.3. GET /api/users/:user_id/settings
- 설명: 특정 사용자의 설정을 조회합니다.
- URL 파라미터:
  - `user_id`: 조회할 사용자의 ID
- 응답 (성공):
  ```json
  {
    "user_id": "사용자 ID",
    "settings": {
      // 사용자 설정 객체
      "theme": "dark",
      "notifications_enabled": true
    }
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "사용자 설정을 찾을 수 없습니다."
  }
  ```

### 2.4. PUT /api/users/:user_id/settings
- 설명: 특정 사용자의 설정을 업데이트합니다.
- URL 파라미터:
  - `user_id`: 업데이트할 사용자의 ID
- 요청 본문:
  ```json
  {
    "theme": "light",
    "notifications_enabled": false
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "사용자 설정이 성공적으로 업데이트되었습니다.",
    "settings": {
      // 업데이트된 설정 객체
    }
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "업데이트할 설정 내용이 없습니다."
  }
  ```

### 2.5. POST /api/users/:user_id/profile/image
- 설명: 특정 사용자의 프로필 이미지를 업로드합니다.
- URL 파라미터:
  - `user_id`: 프로필 이미지를 업로드할 사용자의 ID
- 요청 형식: `multipart/form-data`
  - `profileImage`: 이미지 파일
- 응답 (성공):
  ```json
  {
    "message": "프로필 이미지가 성공적으로 업로드되었습니다.",
    "filePath": "/uploads/profiles/user_id-timestamp-filename.jpg"
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "파일이 제공되지 않았습니다."
  }
  ```

### 2.6. DELETE /api/users/:user_id
- 설명: 특정 사용자의 계정을 삭제합니다 (회원 탈퇴).
- URL 파라미터:
  - `user_id`: 삭제할 사용자의 ID
- 응답 (성공):
  ```json
  {
    "message": "사용자 계정이 성공적으로 삭제되었습니다."
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "사용자를 찾을 수 없거나 삭제에 실패했습니다."
  }
  ```

### 2.7. GET /api/users/:user_id/profile
- 설명: 특정 사용자의 프로필 정보를 조회합니다.
- URL 파라미터:
  - `user_id`: 조회할 사용자의 ID
- 응답 (성공):
  ```json
  {
    "user_id": "사용자 ID",
    "username": "사용자 이름",
    "email": "이메일",
    "profile_image_url": "/uploads/profiles/image.jpg",
    "bio": "자기소개"
    // 기타 프로필 정보
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "사용자 프로필을 찾을 수 없습니다."
  }
  ```

### 2.8. PUT /api/users/:user_id/profile
- 설명: 특정 사용자의 프로필 정보를 업데이트합니다.
- URL 파라미터:
  - `user_id`: 업데이트할 사용자의 ID
- 요청 본문:
  ```json
  {
    "username": "새로운 사용자 이름",
    "bio": "새로운 자기소개"
    // 업데이트할 기타 프로필 정보
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "사용자 프로필이 성공적으로 업데이트되었습니다.",
    "profile": {
      // 업데이트된 프로필 정보
    }
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "프로필 업데이트에 실패했습니다."
  }
  ```

---

## 3. 채팅 세션 관리

### 3.1. POST /api/chat/sessions
- 설명: 새로운 채팅 세션을 생성합니다.
- 요청 본문:
  ```json
  {
    "userId": "사용자 ID",
    "title": "새로운 채팅 세션 제목",
    "category": "일반" // 선택 사항
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "채팅 세션이 성공적으로 생성되었습니다.",
    "session_id": "생성된 세션 ID",
    "title": "새로운 채팅 세션 제목",
    "user_id": "사용자 ID",
    "category": "일반",
    "created_at": "YYYY-MM-DDTHH:mm:ss.sssZ"
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "사용자 ID는 필수이며 빈 문자열이 아니어야 합니다."
  }
  ```

### 3.2. GET /api/sessions/:user_id/chat/sessions
- 설명: 특정 사용자의 모든 채팅 세션 목록을 조회합니다.
- URL 파라미터:
  - `user_id`: 세션 목록을 조회할 사용자의 ID
- 응답 (성공):
  ```json
  [
    {
      "session_id": "세션 ID 1",
      "user_id": "사용자 ID",
      "title": "세션 제목 1",
      "category": "일반",
      "created_at": "YYYY-MM-DDTHH:mm:ss.sssZ",
      "last_message_at": "YYYY-MM-DDTHH:mm:ss.sssZ",
      "is_archived": false
    },
    // ... 다른 세션들
  ]
  ```
- 응답 (오류):
  ```json
  {
    "error": "채팅 세션 목록을 가져오는 데 실패했습니다."
  }
  ```

### 3.3. PUT /api/chat/sessions/:session_id
- 설명: 특정 채팅 세션의 정보를 수정합니다 (제목, 카테고리, 아카이브 상태 등).
- URL 파라미터:
  - `session_id`: 수정할 세션의 ID
- 요청 본문:
  ```json
  {
    "title": "수정된 세션 제목", // 선택 사항
    "category": "중요",       // 선택 사항
    "is_archived": true      // 선택 사항
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "채팅 세션 정보가 성공적으로 업데이트되었습니다.",
    "session": {
      "session_id": "세션 ID",
      // 업데이트된 세션 정보
    }
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "업데이트할 세션 정보가 없습니다."
  }
  ```

### 3.4. DELETE /api/chat/sessions/:session_id
- 설명: 특정 채팅 세션을 삭제합니다. 세션에 속한 메시지들도 함께 삭제될 수 있습니다.
- URL 파라미터:
  - `session_id`: 삭제할 세션의 ID
- 응답 (성공):
  ```json
  {
    "message": "채팅 세션이 성공적으로 삭제되었습니다."
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "세션을 찾을 수 없거나 삭제 권한이 없습니다."
  }
  ```

### 3.5. GET /api/chat/sessions/:session_id/messages
- 설명: 특정 채팅 세션의 모든 메시지 목록을 조회합니다.
- URL 파라미터:
  - `session_id`: 메시지를 조회할 세션의 ID
- 응답 (성공):
  ```json
  [
    {
      "message_id": "메시지 ID 1",
      "session_id": "세션 ID",
      "user_id": "발신자 ID (사용자 또는 AI)",
      "sender_type": "user", // "user" 또는 "ai"
      "message_content": "안녕하세요.",
      "created_at": "YYYY-MM-DDTHH:mm:ss.sssZ",
      "updated_at": "YYYY-MM-DDTHH:mm:ss.sssZ",
      "reaction": "👍", // 선택 사항
      "file_path": "/uploads/...", // 첨부 파일 경로 (선택 사항)
      "file_name": "example.png", // 첨부 파일 이름 (선택 사항)
      "file_type": "image/png" // 첨부 파일 타입 (선택 사항)
    },
    // ... 다른 메시지들
  ]
  ```
- 응답 (오류):
  ```json
  {
    "error": "세션 메시지를 가져오는 데 실패했습니다."
  }
  ```

---

## 4. 채팅 메시지 관리

### 4.1. POST /api/chat/sessions/:session_id/messages
- 설명: 특정 채팅 세션에 새 메시지를 전송하고 AI의 응답을 받습니다.
- URL 파라미터:
  - `session_id`: 메시지를 전송할 세션의 ID
- 요청 본문:
  ```json
  {
    "message": "사용자의 메시지 내용",
    "systemPrompt": "(선택 사항) AI의 행동을 지시하는 시스템 수준 프롬프트. 이 값만 사용됩니다.",
    "specialModeType": "(선택 사항) 특수 처리 모드 ('canvas', 'stream' 등). 'stream'으로 설정 시 Server-Sent Events를 통해 응답이 스트리밍됩니다."
  }
  ```
- 응답 (성공 - 일반 모드, 캔버스 모드):
  ```json
  {
    "user_message_id": "사용자 메시지 ID",
    "ai_message_id": "AI 메시지 ID",
    "message": "AI 응답 내용",
    "created_at": "AI 메시지 생성 시간",
    "canvas_html": "string, canvas 모드 시 HTML 코드",
    "canvas_css": "string, canvas 모드 시 CSS 코드",
    "canvas_js": "string, canvas 모드 시 JS 코드"
  }
  ```
- 응답 (성공 - 스트림 모드):
  - Content-Type: `text/event-stream`
  - 형식:
    ```
    event: data // 또는 다른 이벤트 타입
    data: {"chunk": "스트리밍 데이터 조각", "user_message_id": "사용자 메시지 ID"}

    event: end // 스트림 종료 시
    data: {"message": "Stream ended", "ai_message_id": "저장된 AI 메시지 ID"}

    event: error // 오류 발생 시
    data: {"code": "오류 코드", "message": "오류 메시지"}
    ```
- 응답 (오류):
  ```json
  {
    "error": "메시지 내용은 비어 있을 수 없습니다."
  }
  ```
  ```json
  {
    "error": {
      "code": "AI_REQUEST_FAILED",
      "message": "AI 응답을 가져오는 데 실패했습니다."
    }
  }
  ```

### 4.2. PUT /api/chat/messages/:message_id
- 설명: 특정 메시지의 내용을 수정합니다.
- URL 파라미터:
  - `message_id`: 수정할 메시지의 ID
- 요청 본문:
  ```json
  {
    "content": "수정된 메시지 내용입니다."
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "메시지가 성공적으로 수정되었습니다.",
    "updatedMessage": {
      "message_id": "메시지 ID",
      "message_content": "수정된 메시지 내용입니다.",
      "updated_at": "YYYY-MM-DDTHH:mm:ss.sssZ"
      // 기타 메시지 정보
    }
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "메시지 ID 또는 수정할 내용이 필요합니다."
  }
  ```

### 4.3. DELETE /api/chat/messages/:message_id
- 설명: 특정 메시지를 삭제합니다.
- URL 파라미터:
  - `message_id`: 삭제할 메시지의 ID
- 응답 (성공):
  ```json
  {
    "message": "메시지가 성공적으로 삭제되었습니다."
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "메시지를 찾을 수 없거나 삭제 권한이 없습니다."
  }
  ```

### 4.4. POST /api/chat/messages/:message_id/reaction
- 설명: 특정 메시지에 리액션을 추가합니다. (현재는 단일 리액션만 지원, 덮어쓰기 방식)
- URL 파라미터:
  - `message_id`: 리액션을 추가할 메시지의 ID
- 요청 본문:
  ```json
  {
    "reaction": "👍" // 이모지 등 문자열
  }
  ```
- 응답 (성공):
  ```json
  {
    "message": "리액션이 성공적으로 추가/수정되었습니다.",
    "reaction": "👍"
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "리액션 내용이 비어 있을 수 없습니다."
  }
  ```

### 4.5. DELETE /api/chat/messages/:message_id/reaction
- 설명: 특정 메시지의 리액션을 제거합니다.
- URL 파라미터:
  - `message_id`: 리액션을 제거할 메시지의 ID
- 응답 (성공):
  ```json
  {
    "message": "리액션이 성공적으로 제거되었습니다."
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "리액션 제거에 실패했습니다."
  }
  ```

---

## 5. 파일 업로드

### 5.1. POST /api/chat/sessions/:session_id/files
- 설명: 특정 채팅 세션에 파일을 업로드하고, 해당 파일 정보를 메시지로 저장합니다.
- URL 파라미터:
  - `session_id`: 파일을 업로드할 세션의 ID
- 요청 형식: `multipart/form-data`
  - `file`: 업로드할 파일 (필수)
  - `userId`: 사용자 ID (선택적, 폼 데이터로 전달)
- 응답 (성공):
  ```json
  {
    "message": "파일이 성공적으로 업로드되었습니다.",
    "fileMessage": {
      "message_id": "생성된 파일 메시지 ID",
      "session_id": "세션 ID",
      "user_id": "업로더 ID",
      "sender_type": "user", // 또는 "system"
      "message_content": "파일: original_filename.ext", // 또는 파일 관련 텍스트
      "file_path": "/uploads/timestamp-original_filename.ext",
      "file_name": "original_filename.ext",
      "file_type": "mime/type",
      "created_at": "YYYY-MM-DDTHH:mm:ss.sssZ"
    }
  }
  ```
- 응답 (오류):
  ```json
  {
    "error": "업로드할 파일이 없습니다."
  }
  ```
  ```json
  {
    "error": "파일 업로드 중 오류가 발생했습니다."
  }
  ```


