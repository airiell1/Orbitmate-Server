# 백엔드 구현 작업 목록

## 핵심 채팅 기능
- [x] **채팅 메시지 전송 API 구현 (`POST /api/chat/sessions/:session_id/messages`)**
    - [x] 사용자 메시지 수신 및 기본 유효성 검사 (내용 비어있는지 등)
    - [x] 사용자 메시지 DB 저장 (`saveUserMessageToDB` 함수 활용)
    - [x] 해당 세션의 전체 대화 기록 조회 (`getChatHistoryFromDB` 함수 활용)
    - [x] 대화 기록과 새 메시지를 Vertex AI 형식으로 조합하여 전송 (`getAiResponse` 함수 활용)
    - [x] AI 응답 수신 및 DB 저장 (`saveAiMessageToDB` 함수 활용)
    - [x] 생성된 AI 응답을 클라이언트에 반환 (메시지 ID, 내용, 생성 시간 등)
- [x] **채팅 세션 삭제 API 구현 (`DELETE /api/chat/sessions/:session_id`)**
    - [x] 해당 세션 ID를 가진 `chat_sessions` 레코드 삭제
    - [x] 해당 세션 ID를 가진 모든 `chat_messages` 레코드 삭제 (CASCADE 설정 또는 별도 쿼리)
    - [x] (중요) 사용자 본인의 세션만 삭제 가능하도록 인가(Authorization) 확인 로직 필요 (모델에서 처리)
- [x] **채팅 메시지 삭제 API 구현 (`DELETE /api/chat/messages/:message_id`)**
    - [x] 해당 메시지 ID를 가진 `chat_messages` 레코드 삭제
    - [x] (중요) 사용자 본인이 작성한 메시지만 삭제 가능하도록 인가 확인 로직 필요 (모델에서 처리)
- [x] **메시지 리액션 제거 API 구현 (`DELETE /api/chat/messages/:message_id/reaction`)**
    - [x] 해당 메시지의 `reaction` 필드를 `NULL` 또는 기본값으로 업데이트
    - [ ] (중요) 해당 세션에 참여 중인 사용자인지 확인 로직 필요 (선택 사항)

## 사용자 및 계정 관리
- [ ] **간편 회원가입 (OAuth) 구현** (예: Google, Kakao 등)
    - [ ] OAuth 라이브러리 설정 및 연동 (Passport.js 등)
    - [ ] OAuth 인증 후 사용자 정보 처리 및 DB 저장/연동 로직
    - [ ] 관련 API 엔드포인트 생성 (`/api/auth/google`, `/api/auth/google/callback` 등)
- [ ] **사용자 프로필 기능 확장**
    - [ ] 프로필 사진 업로드 API 구현 (`POST /api/users/:user_id/profile/image`)
        - [ ] 파일 수신 및 유효성 검사 (크기, 형식 제한 등)
        - [ ] 파일 저장 로직 구현 (서버 로컬 또는 클라우드 스토리지)
        - [ ] 사용자 DB에 이미지 경로 또는 ID 저장
    - [ ] 프로필 꾸미기 기능 구현 (테마, 뱃지 등)
        - [ ] `user_profiles` 또는 유사 테이블 생성 (user_id, badge_list, profile_theme 등)
        - [ ] 프로필 정보 조회/수정 API 구현 (`GET /api/users/:user_id/profile`, `PUT /api/users/:user_id/profile`)
- [ ] **계정 레벨 시스템 구현**
    - [ ] `users` 테이블 또는 별도 테이블에 레벨, 경험치 필드 추가
    - [ ] 특정 활동(예: 메시지 전송, 기능 사용) 시 경험치 증가 로직 구현
    - [ ] 레벨업 조건 및 로직 구현
    - [ ] 레벨 정보 조회 API
- [ ] **회원 탈퇴 (계정 데이터 삭제) 기능 구현 (`DELETE /api/users/:user_id`)**
    - [ ] 사용자 관련 모든 데이터 삭제 로직 (세션, 메시지, 설정, 프로필 등)
    - [ ] (주의) 민감한 작업이므로 재확인 절차 및 신중한 구현 필요
    - [ ] (선택) 데이터 즉시 삭제 대신 비활성화 후 일정 기간 뒤 삭제하는 방식 고려

## 데이터 처리 및 AI 기능 확장
- [ ] **파일 업로드 기능 구현 (채팅 메시지 첨부)**
    - [ ] 파일 업로드 API 구현 (`POST /api/chat/sessions/:session_id/files` 등)
    - [ ] `chat_messages` 테이블에 파일 정보(경로, 타입 등) 저장 필드 추가 또는 별도 테이블 관리
    - [ ] 파일 다운로드/접근 권한 관리
- [ ] **채팅 메모리 / 개인화 (고도화)**
    - [ ] (선택) Vector DB 설정 및 연동 (Pinecone, ChromaDB 등)
    - [ ] (선택) 메시지 임베딩 생성 및 Vector DB 저장 로직
    - [ ] (선택) 새 메시지 입력 시 관련성 높은 과거 대화 검색 및 프롬프트 주입 로직
- [ ] **AI 대화 요약 기능 구현**
    - [ ] 요약 요청 API 구현 (`POST /api/chat/sessions/:session_id/summarize`)
    - [ ] Vertex AI 또는 다른 요약 모델 API 호출 로직
    - [ ] 요약 결과 저장 또는 반환 로직

## 백엔드 시스템 개선 및 기타
- [x] **사용자 인증 및 인가 강화**
    - [x] JWT(JSON Web Token) 발급 및 검증 미들웨어 구현 (기본 구현 완료)
    - [x] 로그인 시 JWT 발급, 이후 API 요청 시 헤더에서 토큰 검증 (구현 완료)
    - [x] 각 API 엔드포인트에 필요한 역할/권한 기반 인가 로직 추가 (세션/메시지 삭제 인가 강화 완료)
- [ ] **API 엔드포인트 전반적인 오류 처리 개선**
    - [ ] 일관된 오류 응답 구조 정의 (예: `{ "error": { "code": "...", "message": "..." } }`)
    - [ ] 중앙 집중식 오류 처리 미들웨어 구현
    - [ ] 주요 오류 상황에 대한 상세 로깅 추가
- [ ] **모든 API 엔드포인트에 대한 상세 입력값 유효성 검사 추가**
    - [ ] `express-validator` 또는 `Joi` 같은 라이브러리 도입 고려
    - [ ] 각 필드 타입, 길이, 필수 여부 등 상세 검증 규칙 적용
- [ ] **데이터베이스 커넥션 풀 관리 최적화**
    - [ ] 각 API 요청 처리 시 커넥션 가져오기/반환 로직 명확화 (미들웨어 패턴 고려)
    - [ ] 불필요한 커넥션 유지 방지
- [ ] **API 테스트 작성**
    - [ ] 주요 API 엔드포인트에 대한 통합 테스트 작성 (Supertest 등 사용)
    - [ ] 주요 DB 함수 및 비즈니스 로직에 대한 단위 테스트 작성 (Jest 등 사용)
- [ ] **(선택) WebSocket을 이용한 실시간 메시지 전송 구현**
    - [ ] `ws` 또는 `socket.io` 라이브러리 설정
    - [ ] 클라이언트 연결 관리 및 메시지 브로드캐스팅 로직 구현
- [ ] **이스터에그 기능 구현** (나중에)