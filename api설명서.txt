# Orbitmate API 문서

## 공통 사항
- Base URL: 서버 주소 http://localhost:7777
- 모든 요청/응답 본문은 JSON 형식
- 오류 발생 시 응답 본문에 `{ "error": "오류 메시지" }` 형식으로 오류 내용이 포함됨

---

## 1. 상태 확인 (Health Check)

### `GET /api/health`
- **설명**: 서버의 현재 상태와 타임스탬프를 반환합니다.
- **요청 본문**: 없음
- **성공 응답 (200 OK)**:
  ```json
  {
    "status": "ok",
    "timestamp": "2023-10-27T10:00:00.000Z"
  }
  ```

---

## 2. 사용자 관리 (User Management)

### `POST /api/users/register`
- **설명**: 새 사용자 계정을 생성합니다. 비밀번호는 안전하게 해싱되어 저장됩니다.
- **요청 본문**:
  ```json
  {
    "username": "testuser",
    "email": "test@example.com",
    "password": "password123" // 실제 전송할 비밀번호
  }
  ```
- **필수 필드**: `username`, `email`, `password`
- **성공 응답 (201 Created)**:
  ```json
  {
    "user_id": "generated-user-id",
    "username": "testuser",
    "email": "test@example.com",
    "created_at": "2023-10-27T10:00:00.000Z"
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: 필수 필드가 누락된 경우
    - `409 Conflict`: 이미 등록된 이메일인 경우
    - `500 Internal Server Error`: 서버 오류

### `POST /api/users/login`
- **설명**: 사용자를 인증하고 로그인합니다. 비밀번호는 해시값과 비교됩니다.
- **요청 본문**:
  ```json
  {
    "email": "test@example.com",
    "password": "password123" // 실제 전송할 비밀번호
  }
  ```
- **필수 필드**: `email`, `password`
- **성공 응답 (200 OK)**:
  ```json
  {
    "user_id": "test-user-id",
    "username": "testuser",
    "email": "test@example.com",
    "logged_in_at": "2023-10-27T10:05:00.000Z"
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: 필수 필드가 누락된 경우
    - `401 Unauthorized`: 이메일 또는 비밀번호가 잘못된 경우
    - `403 Forbidden`: 계정이 비활성화된 경우
    - `500 Internal Server Error`: 서버 오류

---

## 3. 채팅 세션 (Chat Sessions)

### `POST /api/chat/sessions`
- **설명**: 새 채팅 세션을 생성합니다.
- **요청 본문**:
  ```json
  {
    "userId": "test-user-id",
    "title": "새로운 대화",
    "category": "일반"
  }
  ```
- **필수 필드**: `userId`, `title`
- **선택 필드**: `category`
- **성공 응답 (201 Created)**:
  ```json
  {
    "session_id": "new-session-id",
    "title": "새로운 대화",
    "category": "일반",
    "created_at": "2023-10-27T10:10:00.000Z"
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: 필수 필드가 누락된 경우
    - `500 Internal Server Error`: 서버 오류

### `GET /api/users/:user_id/chat/sessions`
- **설명**: 특정 사용자의 모든 채팅 세션 목록을 조회합니다. (최근 업데이트 순)
- **URL 파라미터**:
    - `user_id`: 사용자 ID
- **성공 응답 (200 OK)**:
  ```json
  {
    "sessions": [
      {
        "session_id": "session-id-1",
        "title": "대화 1",
        "created_at": "2023-10-27T10:10:00.000Z",
        "updated_at": "2023-10-27T10:15:00.000Z",
        "category": "일반",
        "is_archived": false
      },
      {
        "session_id": "session-id-2",
        "title": "대화 2",
        "created_at": "2023-10-26T09:00:00.000Z",
        "updated_at": "2023-10-26T09:05:00.000Z",
        "category": "업무",
        "is_archived": true
      }
      // ... more sessions
    ]
  }
  ```
- **오류 응답**:
    - `500 Internal Server Error`: 서버 오류

### `PUT /api/chat/sessions/:session_id`
- **설명**: 특정 채팅 세션의 정보를 수정합니다 (제목, 카테고리, 아카이브 상태).
- **URL 파라미터**:
    - `session_id`: 수정할 세션 ID
- **요청 본문**: (수정할 필드만 포함)
  ```json
  {
    "title": "수정된 대화 제목",
    "category": "중요",
    "is_archived": false
  }
  ```
- **성공 응답 (200 OK)**:
  ```json
  {
    "session_id": "session-id-1",
    "title": "수정된 대화 제목",
    "category": "중요",
    "is_archived": false,
    "updated_at": "2023-10-27T10:20:00.000Z"
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: 수정할 필드가 하나도 없는 경우
    - `500 Internal Server Error`: 서버 오류

---

## 4. 채팅 메시지 (Chat Messages)

### `GET /api/chat/sessions/:session_id/messages`
- **설명**: 특정 채팅 세션의 모든 메시지 목록을 조회합니다. (생성 시간 순)
- **URL 파라미터**:
    - `session_id`: 메시지를 조회할 세션 ID
- **성공 응답 (200 OK)**:
  ```json
  {
    "messages": [
      {
        "message_id": "msg-id-1",
        "user_id": "test-user-id", // 사용자 메시지인 경우
        "message_type": "user",
        "message_content": "안녕하세요",
        "created_at": "2023-10-27T10:15:01.000Z",
        "reaction": null,
        "is_edited": false,
        "edited_at": null,
        "parent_message_id": null
      },
      {
        "message_id": "msg-id-2",
        "user_id": null, // AI 메시지인 경우
        "message_type": "ai",
        "message_content": "안녕하세요! 무엇을 도와드릴까요?",
        "created_at": "2023-10-27T10:15:03.000Z",
        "reaction": "👍",
        "is_edited": false,
        "edited_at": null,
        "parent_message_id": null
      }
      // ... more messages
    ]
  }
  ```
- **오류 응답**:
    - `500 Internal Server Error`: 서버 오류

### `POST /api/chat/sessions/:session_id/messages`
- **설명**: 특정 채팅 세션에 새 메시지를 보내고 AI의 전체 응답을 받습니다. 이전 대화 기록이 컨텍스트로 사용됩니다.
- **URL 파라미터**:
    - `session_id`: 메시지를 보낼 세션 ID
- **요청 본문**:
  ```json
  {
    "message": "오늘 날씨 어때?"
  }
  ```
- **필수 필드**: `message`
- **성공 응답 (200 OK)**:
  ```json
  {
    "message": "오늘 서울의 날씨는 맑고 최고 기온은 25도입니다." // AI의 전체 응답
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: `message` 필드가 누락된 경우
    - `500 Internal Server Error`: 메시지 처리 중 오류 발생

### `POST /api/chat/sessions/:session_id/messages/stream`
- **설명**: 특정 채팅 세션에 새 메시지를 보내고 AI의 응답을 스트리밍으로 받습니다. Server-Sent Events (SSE)를 사용합니다. 이전 대화 기록이 컨텍스트로 사용됩니다.
- **URL 파라미터**:
    - `session_id`: 메시지를 보낼 세션 ID
- **요청 본문**:
  ```json
  {
    "message": "재미있는 이야기 해줘."
  }
  ```
- **필수 필드**: `message`
- **성공 응답 (200 OK, Content-Type: text/event-stream)**:
  - 여러 개의 `data` 이벤트가 순차적으로 전송됩니다. 각 이벤트는 JSON 형식입니다.
  ```sse
  data: {"chunk": "옛날 옛날에,"}

  data: {"chunk": " 한 마을에..."}

  data: {"chunk": " (이야기 계속) ..."}

  data: {"chunk": " 끝."}

  data: {"end": true} // 스트림 종료 신호
  ```
- **오류 응답**:
    - `400 Bad Request`: `message` 필드가 누락된 경우
    - 스트리밍 중 오류 발생 시 `data: {"error": "오류 메시지"}` 이벤트가 전송될 수 있습니다.
    - `500 Internal Server Error`: (초기 요청 처리 중 오류 발생 시)

### `PUT /api/chat/messages/:message_id`
- **설명**: 특정 메시지의 내용을 수정합니다.
- **URL 파라미터**:
    - `message_id`: 수정할 메시지 ID
- **요청 본문**:
  ```json
  {
    "content": "수정된 메시지 내용입니다."
  }
  ```
- **필수 필드**: `content`
- **성공 응답 (200 OK)**:
  ```json
  {
    "message_id": "msg-id-1",
    "user_id": "test-user-id",
    "message_type": "user",
    "message_content": "수정된 메시지 내용입니다.",
    "created_at": "2023-10-27T10:15:01.000Z",
    "edited_at": "2023-10-27T10:25:00.000Z",
    "is_edited": true,
    "session_id": "session-id-1"
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: `content` 필드가 누락된 경우
    - `404 Not Found`: 해당 메시지를 찾을 수 없는 경우
    - `500 Internal Server Error`: 서버 오류

### `POST /api/chat/messages/:message_id/reaction`
- **설명**: 특정 메시지에 리액션을 추가/수정합니다.
- **URL 파라미터**:
    - `message_id`: 리액션을 추가할 메시지 ID
- **요청 본문**:
  ```json
  {
    "reaction": "❤️" // 이모지 등 리액션 문자열
  }
  ```
- **필수 필드**: `reaction`
- **성공 응답 (200 OK)**:
  ```json
  {
    "message_id": "msg-id-2",
    "reaction": "❤️",
    "updated_at": "2023-10-27T10:30:00.000Z"
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: `reaction` 필드가 누락된 경우
    - `500 Internal Server Error`: 서버 오류

---

## 5. 사용자 설정 (User Settings)

### `GET /api/users/:user_id/settings`
- **설명**: 특정 사용자의 설정을 조회합니다.
- **URL 파라미터**:
    - `user_id`: 설정을 조회할 사용자 ID
- **성공 응답 (200 OK)**:
  ```json
  {
    "theme": "dark",
    "language": "ko",
    "font_size": 14,
    "notifications_enabled": true,
    "ai_model_preference": "gemini-2.5-pro-exp-03-25"
  }
  ```
- **오류 응답**:
    - `404 Not Found`: 사용자 설정을 찾을 수 없는 경우
    - `500 Internal Server Error`: 서버 오류

### `PUT /api/users/:user_id/settings`
- **설명**: 특정 사용자의 설정을 업데이트합니다.
- **URL 파라미터**:
    - `user_id`: 설정을 업데이트할 사용자 ID
- **요청 본문**: (업데이트할 필드만 포함)
  ```json
  {
    "theme": "light",
    "font_size": 16,
    "notifications_enabled": false
  }
  ```
- **성공 응답 (200 OK)**:
  ```json
  {
    "theme": "light",
    "language": "ko", // 변경되지 않은 필드도 포함될 수 있음
    "font_size": 16,
    "notifications_enabled": false,
    "ai_model_preference": "gemini-2.5-pro-exp-03-25",
    "updated_at": "2023-10-27T10:35:00.000Z"
  }
  ```
- **오류 응답**:
    - `400 Bad Request`: 업데이트할 설정 필드가 하나도 없는 경우
    - `500 Internal Server Error`: 서버 오류

---

## 6. 채팅 메시지 관련 API

**1. 메시지 전송 (텍스트)**
*   **Endpoint:** `POST /api/chat/sessions/:session_id/messages`
*   **인증:** 필요 (JWT 토큰)
*   **요청 본문 (Request Body):**
    ```json
    {
      "content": "사용자가 입력한 메시지 내용"
    }
    ```
*   **성공 응답 (Success Response):**
    ```json
    {
      "message_id": 123, // 생성된 AI 메시지의 ID
      "content": "AI가 생성한 응답 메시지",
      "created_at": "2023-10-27T10:00:00.000Z",
      "sender_type": "ai"
    }
    ```
*   **설명:** 특정 채팅 세션에 사용자의 메시지를 보내고 AI의 응답을 받습니다.

**2. 파일 업로드**
*   **Endpoint:** `POST /api/chat/sessions/:session_id/files`
*   **인증:** 필요 (JWT 토큰)
*   **요청 형식:** `multipart/form-data`
*   **요청 필드:**
    *   `file`: 업로드할 파일 (단일 파일)
*   **성공 응답 (Success Response):**
    ```json
    {
        "message": "파일이 성공적으로 업로드되었습니다.",
        "uploadedFile": {
            "message_id": 124, // 파일 정보가 저장된 메시지의 ID
            "filename": "example.jpg",
            "mimetype": "image/jpeg",
            "size": 102400, // 바이트 단위
            "upload_timestamp": "2023-10-28T11:00:00.000Z"
        }
    }
    ```
*   **설명:** 특정 채팅 세션에 파일을 업로드합니다. 업로드된 파일 정보는 메시지로 저장됩니다.

**3. 메시지 삭제**
*   **Endpoint:** `DELETE /api/chat/messages/:message_id`
*   **인증:** 필요 (JWT 토큰)
*   **성공 응답 (Success Response):**
    ```json
    {
      "message": "메시지가 성공적으로 삭제되었습니다."
    }
    ```
*   **설명:** 특정 메시지를 삭제합니다. 사용자 본인이 작성한 메시지만 삭제 가능합니다.

**4. 메시지 리액션 제거**
*   **Endpoint:** `DELETE /api/chat/messages/:message_id/reaction`
*   **인증:** 필요 (JWT 토큰)
*   **성공 응답 (Success Response):**
    ```json
    {
      "message": "메시지 리액션이 성공적으로 제거되었습니다."
    }
    ```
*   **설명:** 특정 메시지의 리액션을 제거합니다.
